<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C--实现SM3国密算法</title>
      <link href="/2020/03/09/C--%E5%AE%9E%E7%8E%B0sm3%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/09/C--%E5%AE%9E%E7%8E%B0sm3%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于<strong>mircal</strong>库中的<strong>SHA-256</strong>算法改编而成。</p></blockquote><a id="more"></a><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>全称：“SM3密码杂凑算法”<em>(SM3 Cryptographic Hash Algorithm)</em>，其中sm是<strong>商用密码</strong>的拼音简称。</p><p> 以下是算法文字说明<br> 大致思想与SHA-256一致</p></li></ul><hr><p><img src="https://s2.ax1x.com/2020/03/09/89hnG8.jpg" alt="" title="说明1"></p><hr><p><img src="https://s2.ax1x.com/2020/03/09/89hZIP.jpg" alt="" title="说明2"></p><hr><p><img src="https://s2.ax1x.com/2020/03/09/89hmPf.jpg" alt="" title="说明3"></p><hr><p><img src="https://s2.ax1x.com/2020/03/09/89hVat.jpg" alt="" title="说明4"></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li><p>定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义无符号整型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unsign32 unsigned int</span></span><br><span class="line"><span class="comment">//定义sm3结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">unsign32 length[<span class="number">2</span>];<span class="comment">//保证消息长度满足条件：L &lt; 2^32</span></span><br><span class="line">unsign32 h[<span class="number">8</span>];   <span class="comment">//记录生成的杂凑值</span></span><br><span class="line">unsign32 w0[<span class="number">80</span>];</span><br><span class="line">unsign32 w1[<span class="number">80</span>];</span><br><span class="line">&#125; sm3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pad 0x80</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T0 0x79cc4519L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T1 0x7a879d8aL</span></span><br><span class="line"><span class="comment">//定义初始值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> unsign32 InitNum[<span class="number">8</span>] = &#123;</span><br><span class="line"><span class="number">0x7380166f</span>L,<span class="number">0x4914b2b9</span>L,<span class="number">0x172442d7</span>L,<span class="number">0xda8a0600</span>L,</span><br><span class="line"><span class="number">0xa96f30bc</span>L,<span class="number">0x163138aa</span>L,<span class="number">0xe38dee4d</span>L,<span class="number">0xb0fb0e4e</span>L</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义布尔函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF0(X,Y,Z)  ((X)^(Y)^(Z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF1(X,Y,Z)((X&amp;Y)|(X&amp;Z)|(Y&amp;Z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GG0(X,Y,Z)((X)^(Y)^(Z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GG1(X,Y,Z)((X&amp;Y)|(~(X)&amp;Z))</span></span><br><span class="line"><span class="comment">//定义置换函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(X,n)(((X)<span class="meta-string">&lt;&lt;n) | ((X)&gt;&gt;(32-n)))</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P0(X)((X)^L(X,9)^L(X,17))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P1(X)((X)^L(X,15)^L(X,23))</span></span><br></pre></td></tr></table></figure></li><li><p>初始化函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sm3_init</span><span class="params">(sm3 *sm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">sm-&gt;w0[i] = <span class="number">0L</span>;</span><br><span class="line">sm-&gt;w1[i] = <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line">sm-&gt;length[<span class="number">0</span>] = sm-&gt;length[<span class="number">1</span>] = <span class="number">0L</span>;</span><br><span class="line">sm-&gt;h[<span class="number">0</span>] = InitNum[<span class="number">0</span>]; sm-&gt;h[<span class="number">1</span>] = InitNum[<span class="number">1</span>];</span><br><span class="line">sm-&gt;h[<span class="number">2</span>] = InitNum[<span class="number">2</span>]; sm-&gt;h[<span class="number">3</span>] = InitNum[<span class="number">3</span>];</span><br><span class="line">sm-&gt;h[<span class="number">4</span>] = InitNum[<span class="number">4</span>]; sm-&gt;h[<span class="number">5</span>] = InitNum[<span class="number">5</span>];</span><br><span class="line">sm-&gt;h[<span class="number">6</span>] = InitNum[<span class="number">6</span>]; sm-&gt;h[<span class="number">7</span>] = InitNum[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加工函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//加工函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sm3_process</span><span class="params">(sm3 *sm,<span class="keyword">int</span> bt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = (<span class="keyword">int</span>)((sm-&gt;length[<span class="number">0</span>] / <span class="number">32</span>) % <span class="number">16</span>);<span class="comment">//每个字4个字节，32位；16个字大小为512位</span></span><br><span class="line"></span><br><span class="line">sm-&gt;w0[k] &lt;&lt;= <span class="number">8</span>;<span class="comment">//左移8位</span></span><br><span class="line">sm-&gt;w0[k] |= (unsign32)(bt &amp; <span class="number">0xff</span>);<span class="comment">//保持补码的一致性</span></span><br><span class="line"></span><br><span class="line">sm-&gt;length[<span class="number">0</span>] += <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (sm-&gt;length[<span class="number">0</span>] == <span class="number">0L</span>) &#123;<span class="comment">//无符号整型溢出将进行舍弃最高位的操作</span></span><br><span class="line">sm-&gt;length[<span class="number">1</span>]++;  <span class="comment">//消息长度需小于2^64，所以2个字足够保证记录消息长度</span></span><br><span class="line">sm-&gt;length[<span class="number">0</span>] = <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((sm-&gt;length[<span class="number">0</span>] % <span class="number">512</span>) == <span class="number">0</span>) &#123;<span class="comment">//若消息长度超过512，便直接对其前面16个字进行处理</span></span><br><span class="line">sm3_transform(sm); <span class="comment">//降低算法复杂度</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>转换函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//转换函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sm3_transform</span><span class="params">(sm3 *sm)</span> </span>&#123;</span><br><span class="line">unsign32 A, B, C, D, E, F, G, H, SS1, SS2, TT1, TT2;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">16</span>; i &lt; <span class="number">68</span>; i++) &#123;</span><br><span class="line">sm-&gt;w0[i] = P1(sm-&gt;w0[i - <span class="number">16</span>] ^ sm-&gt;w0[i - <span class="number">9</span>] ^ (L(sm-&gt;w0[i - <span class="number">3</span>], <span class="number">15</span>))) ^ L(sm-&gt;w0[i - <span class="number">13</span>], <span class="number">7</span>) ^ sm-&gt;w0[i - <span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">sm-&gt;w1[i] = sm-&gt;w0[i] ^ sm-&gt;w0[i + <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A = sm-&gt;h[<span class="number">0</span>]; B = sm-&gt;h[<span class="number">1</span>]; C = sm-&gt;h[<span class="number">2</span>]; D = sm-&gt;h[<span class="number">3</span>];</span><br><span class="line">E = sm-&gt;h[<span class="number">4</span>]; F = sm-&gt;h[<span class="number">5</span>]; G = sm-&gt;h[<span class="number">6</span>]; H = sm-&gt;h[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">SS1 = (i&lt;=<span class="number">15</span>) ? L(L(A, <span class="number">12</span>) + E + L(T0, i), <span class="number">7</span>) : L(L(A, <span class="number">12</span>) + E + L(T1, i), <span class="number">7</span>);</span><br><span class="line">SS2 = (SS1) ^ L(A, <span class="number">12</span>);</span><br><span class="line">TT1 = (i&lt;=<span class="number">15</span>) ? FF0(A, B, C) + D + SS2 + sm-&gt;w1[i] : FF1(A, B, C) + D + SS2 + sm-&gt;w1[i];</span><br><span class="line">TT2 = (i&lt;=<span class="number">15</span>) ? GG0(E, F, G) + H + SS1 + sm-&gt;w0[i] : GG1(E, F, G) + H + SS1 + sm-&gt;w0[i];</span><br><span class="line">D = C;</span><br><span class="line">C = L(B, <span class="number">9</span>);</span><br><span class="line">B = A;</span><br><span class="line">A = TT1;</span><br><span class="line">H = G;</span><br><span class="line">G = L(F, <span class="number">19</span>);</span><br><span class="line">F = E;</span><br><span class="line">E = P0(TT2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sm-&gt;h[<span class="number">0</span>] ^= A; sm-&gt;h[<span class="number">1</span>] ^= B; sm-&gt;h[<span class="number">2</span>] ^= C; sm-&gt;h[<span class="number">3</span>] ^= D;</span><br><span class="line">sm-&gt;h[<span class="number">4</span>] ^= E; sm-&gt;h[<span class="number">5</span>] ^= F; sm-&gt;h[<span class="number">6</span>] ^= G; sm-&gt;h[<span class="number">7</span>] ^= H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成杂凑值函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//生成杂凑值函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sm3_final</span><span class="params">(sm3 *sm,<span class="keyword">unsigned</span> <span class="keyword">char</span> h[<span class="number">32</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">unsign32 len0 = sm-&gt;length[<span class="number">0</span>];</span><br><span class="line">unsign32 len1 = sm-&gt;length[<span class="number">1</span>];</span><br><span class="line">sm3_process(sm, pad);</span><br><span class="line"><span class="keyword">while</span> (sm-&gt;length[<span class="number">0</span>] % <span class="number">512</span> != <span class="number">448</span>) &#123;</span><br><span class="line">sm3_process(sm, zero);</span><br><span class="line">&#125;</span><br><span class="line">sm-&gt;w0[<span class="number">14</span>] = len1;</span><br><span class="line">sm-&gt;w0[<span class="number">15</span>] = len0;</span><br><span class="line">sm3_transform(sm);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">h[i] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)((sm-&gt;h[i / <span class="number">4</span>] &gt;&gt; (<span class="number">8</span> * (<span class="number">3</span> - i % <span class="number">4</span>))) &amp; <span class="number">0xff</span>L);</span><br><span class="line">&#125;</span><br><span class="line">sm3_init(sm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口封装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口封装</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sm3_hash</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *test)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">sm3 sm;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> h[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">sm3_init(&amp;sm);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; test[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">sm3_process(&amp;sm, test[i]);</span><br><span class="line">&#125;</span><br><span class="line">sm3_final(&amp;sm, h);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, (<span class="keyword">unsigned</span> <span class="keyword">char</span>)h[i]);</span><br><span class="line"><span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体使用例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> test[] = <span class="string">"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"</span>;</span><br><span class="line">sm3_hash(test);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> c </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
